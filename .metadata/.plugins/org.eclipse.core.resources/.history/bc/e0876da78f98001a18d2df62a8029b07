import java.util.ArrayList;


public class SudokuBoard {

	Column columnRef;
	Row rowRef;
	Square squareRef;
	static Box[][][] sudoku = new Box[9][3][3];
	static ArrayList<ArrayList<ArrayList<Integer>>> colMissPosition;
	static ArrayList<ArrayList<ArrayList<Integer>>> rowMissPosition;
	static ArrayList<ArrayList<ArrayList<Integer>>> boxMissPosition;
	int[][][] sudokuValues =
	{ 		{{0,2,0},
			 {5,8,0},
			 {0,0,0}},
						{{6,0,8},
				 		 {0,0,9},
				 		 {0,4,0}},
									{{0,0,0},
				 			 		 {7,0,0},
				 			 		 {0,0,0}},
			{{3,7,0},
			 {6,0,0},
			 {0,0,8}},
						{{0,0,0},
				 		 {0,0,0},
				 		 {0,0,0}},
									{{5,0,0},
									 {0,0,4},
									 {0,1,3}},
			{{0,0,0},
			 {0,0,9},
			 {0,0,0}},
						{{0,2,0},
				 		 {8,0,0},
				 		 {3,0,6}},
									{{0,0,0},
				 			 		 {0,3,6},
				 			 		 {0,9,0}}
	};
	
	public SudokuBoard() {
		setSudoku();
		Square.Square();
		Row.Row();
		Column.Column();
		initializeBoxMiss();
		setMissPosition();
		System.out.println(Square.square.get(1).get(4).col);
//		squareRef = new Square();
//		columnRef = new Column();
	}
	
	
	public void setSudoku(){
		for(int x=0;x<sudoku.length;x++){
			for(int y = 0;y<sudoku[x].length;y++){
				for(int z = 0;z<sudoku[x][y].length;z++){
					try {
						int box = x;
						int row = 3*(box/3)+y;
						int col = 3*(box%3)+z;
						sudoku[x][y][z]=new Box
								(sudokuValues[x][y][z],box,row,col);
					} catch (Exception e) {
						System.err.println(x+"\t"+y+"\t"+z);
						e.printStackTrace();
					}
				}
			}
		}
	}
	
	public void printSudoku(){
		//ArrayList<ArrayList<ArrayList<Integer>>> test = new ArrayList<>();
		//System.out.println("Solved: "+Box.solved);
		System.out.println("_____________________________________");
		for(int x = 1;x<10;x++){
			int hori = ((x<4)?-1:(x<7)?2:5);
			int y=(x-1)%3;
			
			for(int i=1;i<10;i++){
				if((i-1)%3==0){
					hori++;
					System.out.print("| {");}
				int value = sudoku[hori][y][(i-1)%3].getBoxValue();
				System.out.printf("%2s", (value>0?Integer.toString(value):""));
				if(i==9)
					System.out.print("}|");
				else if(i%3==0)
					System.out.print("}");
				else
					System.out.print(",");
				
			}
			
			if(x%3==0)
				System.out.println("\n-------------------------------------");
			else
				System.out.println();
		} 
		System.out.println();
//		printBoxMiss();
//		printRowMiss();
		//printSudokuMiss();
	}
	
	public void printBoxMiss(){
		for(int j=0;j<9;j++){
			System.out.println("BOX "+j);
			for(int i=0;i<9;i++){
				//if(boxMissPosition.get(j).get(i).size()==1)
				System.out.printf("%2d: %2s\n", (i+1),boxMissPosition.get(j).get(i));
			}
		}
	}
	public void printRowMiss(){
		System.out.printf("%3s %10d %10d %10d %10d %10d %10d %10d %10d %10d\n","ROW",1,2,3,4,5,6,7,8,9);
		for(int j=0;j<9;j++){
			System.out.printf("%-3d:", (j+1));
			for(int i=0;i<9;i++){
				//if(rowMissPosition.get(j).get(i).size()==1)
				System.out.printf("%7s", rowMissPosition.get(j).get(i));
			}
			System.out.println();
		}
	}
	public void printColMiss(){
		for(int j=0;j<9;j++){
			System.out.println("COL "+j);
			for(int i=0;i<9;i++){
				//if(rowMissPosition.get(j).get(i).size()==1)
				System.out.printf("%2d: %2s\n", (i+1),colMissPosition.get(j).get(i));
			}
		}
	}
	
	public void printSudokuMiss(){
		//ArrayList<ArrayList<ArrayList<Integer>>> test = new ArrayList<>();
		System.out.println("_____________________________________");
		for(int x = 1;x<10;x++){
			int hori = ((x<4)?-1:(x<7)?2:5);
			int y=(x-1)%3;
			
			for(int i=1;i<10;i++){
				if((i-1)%3==0){
					hori++;
					System.out.print("| {");}
				int value = sudoku[hori][y][(i-1)%3].getBoxValue();
				System.out.printf("%2s", (sudoku[hori][y][(i-1)%3].getMissValue()));
				if(i==9)
					System.out.print("}|");
				else if(i%3==0)
					System.out.print("}");
				else
					System.out.print(",");
				
			}
			
			if(x%3==0)
				System.out.println("\n-------------------------------------");
			else
				System.out.println();
		} 
		System.out.println();
	}
	
	public void solve(){
//		ArrayList<ArrayList<ArrayList<Integer>>> test = new ArrayList<>();
//		ArrayList<Integer> sum = new ArrayList<>();
//		ArrayList<Integer> bum = new ArrayList<>();
//		for(int i=0;i<3;i++)
//			sum.add(i);
//		for(int i=3;i<9;i++)
//			bum.add(i);
//		test.add(new ArrayList<>());
//		test.add(new ArrayList<>());
//		test.get(0).add(bum);
//		test.get(0).add(sum);
//		test.get(1).add(sum);
//		test.get(1).add(bum);
//		System.out.println(test.get(0));

		System.out.println("\t\tPROBLEM");	
		printSudoku();
		while(!full()){
			posTactics1();
			updateBoxMiss();
			setMissPosition();
//			System.out.println(Row.rowMissPosition.get(1).get(0));
//			System.out.println(Row.rowMissPosition.get(1).get(1));
//			
		}
		System.out.println("\t\tSOLUTION");
		printSudoku();

	}
	
	public void updateBoxMiss(){
		for(int x=0;x<sudoku.length;x++){
			for(int y = 0;y<sudoku[x].length;y++){
				for(int z = 0;z<sudoku[x][y].length;z++){
					if(sudoku[x][y][z].isEmpty())
						try {
							setBoxMiss(x,y,z);
						} catch (Exception e) {
							e.printStackTrace();
						}
				}
			}
		}
	}
	
	public void initializeBoxMiss(){
		for(int x=0;x<sudoku.length;x++){
			for(int y = 0;y<sudoku[x].length;y++){
				for(int z = 0;z<sudoku[x][y].length;z++){
					if(sudoku[x][y][z].isEmpty())
						try {
							initialBoxMiss(x,y,z);
						} catch (Exception e) {
							e.printStackTrace();
						}
				}
			}
		}
	}
	
	public void updateCol(int col,ArrayList<Integer> pos, ArrayList<Integer> values){
		
		for(int i=0;i<9;i++){
			boolean same=true;
			for(int num : pos)
				if((i==num))
					same=false;
				
			if(Column.col.get(col).get(i).isEmpty()&&same)
				for(int num : values)
					Column.col.get(col).get(i).removeMissValue((Integer)num);
					
		}
		
	}
	
	public void updateBox(int box,ArrayList<Integer> pos, ArrayList<Integer> values){

		for(int i=0;i<9;i++){
			boolean same=true;
			for(int num : pos)
				if((i==num))
					same=false;
				
			if(Square.square.get(box).get(i).isEmpty()&&same)
				for(int num : values)
					Square.square.get(box).get(i).removeMissValue((Integer)num);
					
		}
		
	}
	
	public void updateRow(int row,ArrayList<Integer> pos, ArrayList<Integer> values){

		for(int i=0;i<9;i++){
			boolean same=true;
			for(int num : pos)
				if((i==num))
					same=false;
				
			if(Row.row.get(row).get(i).isEmpty()&&same)
				for(int num : values)
					Row.row.get(row).get(i).removeMissValue((Integer)num);
					
		}
		
	}
	
	public void updateTactics2(int box, ArrayList<Integer> pos, ArrayList<Integer> values, int type){
		ArrayList<Integer> setPos = new ArrayList<>();
		switch(type){
		case 0:{
			int col = (box%3)+(pos.get(0)%3);
			int row = ( 3*(box/3)+ (pos.get(0)/3) );
			for(int num:pos){
				for(int rem:Row.row.get(box).get(num).getMissValue()){
					//System.out.println(Row.row.get(box).get(num).getMissValue());
					if(!values.contains(rem))
						rowMissPosition.get(box).get(rem-1).remove((Integer)num);
					//System.out.println(rowMissPosition.get(box).get(rem-1)+"**");
				}
				Square.square.get(box).get(num).setMissArray(values);
				
			}
			if(pos.get(0)%3==pos.get(1)%3){
				for(int num:pos){
					setPos.add( 3*(box/3)+ (num/3)  );
				}
				updateCol(col,setPos,values);
			}
			if(pos.get(0)/3==pos.get(1)/3){
				for(int num:pos){
					setPos.add( 3*(box%3)+ (num%3)  );
				}
				updateRow(row,setPos,values);
			}
			}
		break;
		case 1:{///ROW
			
			int square = ( 3*(box/3)+ (pos.get(0)/3) );
			for(int num:pos){
				for(int rem:Row.row.get(box).get(num).getMissValue()){
					//System.out.println(Row.row.get(box).get(num).getMissValue());
					if(!values.contains(rem)){
						//System.out.println(Row.row.get(box).get(num).getMissValue()+"**");
						//System.out.println(values+"**");
						//System.out.println(rem+"**");
						Row.row.get(box).get(num).setBlacklist(rem);
						rowMissPosition.get(box).get(rem-1).remove((Integer)num);
//						colMissPosition.get( Row.row.get(box).get(rem-1).col).get(rem-1).remove((Integer) box );
//						boxMissPosition.get( Row.row.get(box).get(rem-1).box).get(rem-1).remove((Integer) ((((Row.row.get(box).get(rem-1).col))%3) + 3*(box%3 )) );
					}
					//System.out.println(rowMissPosition.get(box).get(rem-1)+"**");
				}
				Row.row.get(box).get(num).setMissArray(values);
				System.out.println(Row.row.get(box).get(num).getMissValue()+"**");
				printColMiss();
			//System.err.println(Row.row.get(box).get(num).getMissValue());
			//System.err.println(rowMissPosition.get(1).get(2));	
			}if(pos.get(0)/3==pos.get(1)/3){
				for(int num:pos){
					setPos.add( 3*(box%3)+ (num%3)  );
				}
				updateBox(square,setPos,values);
			}
			//setMissPosition();
		}break;
		case 2:{ //COLUMN
		
			int square = ( (box/3)+ 3*(pos.get(0)/3) );
			for(int num:pos)
				Column.col.get(box).get(num).setMissArray(values);
			if(pos.get(0)/3==pos.get(1)/3){
				for(int num:pos){
					setPos.add( 3*(num%3)+ (box%3)  );
				}
				updateBox(square,setPos,values);
			}
			
		}break;
		
		}
	}
	
	public void posTactics2(int box, int no ,int type){
		
		switch(type){
		//TYPE ZERO IS BOX
		case 0:{
			for(int i=0;i<9;i++){
				if(i!=no)
					if(boxMissPosition.get(box).get(no).equals
						(boxMissPosition.get(box).get(i))){
						ArrayList<Integer> values = new ArrayList<>(); 
						values.add((no));
						values.add((i));
						ArrayList<Integer> pos = boxMissPosition.get(box).get(i);
						updateTactics2(box,pos,values,type);
				}
			}
		
		}break;
		//TYPE 1 is Row
		case 1:{
			int row = box;
			for(int i=0;i<9;i++){
				if(i!=no)
					if(rowMissPosition.get(row).get(no).equals
						(rowMissPosition.get(row).get(i))){
						//System.err.println(row+":\t"+no+" & "+i);
						ArrayList<Integer> values = new ArrayList<>(); 
						values.add((no+1));
						values.add((i+1));
						ArrayList<Integer> pos = rowMissPosition.get(row).get(i);
						updateTactics2(row,pos,values,type);
				}
			}
		
		}break;
		///TYPE IS A COLUMN
		case 2:{
			int col = box;
			for(int i=0;i<9;i++){
				if(i!=no)
					if(colMissPosition.get(col).get(no).equals
						(colMissPosition.get(col).get(i))){
						ArrayList<Integer> values = new ArrayList<>(); 
						values.add((no));
						values.add((i));
						ArrayList<Integer> pos = colMissPosition.get(col).get(i);
						updateTactics2(col,pos,values,type);
				}
			}
			
		}break;
		
		}
		
	}
	
	public void setValue(Box box,int value){
		try {
			box.setBoxValue(value);
			updateValues(box);
			newMissValues();
			Box.solved++;
			printSudoku();
			printRowMiss();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void posTactics1(){
		//THIS TACTICS CHECKS IF A NUMBER CAN ONLY BE FOUND IN ONE POSITION
		//setMissPosition();
		//CHECKING EACH BOX FOR THIS PATTERN
		int box = -1;
		//System.out.println();
		for(ArrayList<ArrayList<Integer>> i : boxMissPosition){
			box++;
			int number = -1;
			for(ArrayList<Integer> j : i){
				number++;
				if(j.size()==1){
					int y= (j.get(0)<3?0:j.get(0)<6?1:2);
					int z=	(j.get(0)%3);
					int rowNo = 3*(box/3)+y;
					int colNo = 3*(box%3)+z;
//					System.out.println(boxMissPosition.get(5).get(6)+"\t"+number);
					try {
						setValue(sudoku[box][y][z],number+1);
//						System.out.println(boxMissPosition.get(box).get(number)+"\t"+number);
//						System.out.println(3*(box%3)+z);
						
//						updateBoxMiss();
						//setMissPosition();
					} catch (Exception e) {
						System.err.println("Na here"+e);
						e.printStackTrace();
					}
				}
				else if(j.size()==2){
					int y= (j.get(0)<3?0:j.get(0)<6?1:2);
					int z=	(j.get(0)%3);
					
					
					//posTactics2(box,number,0);
				}
				else if(Square.square.get(box).get(number).getMissValue().size()==3){
					int three = 0;
					for(int x =0;x<9;x++){
						if(x!=number)
							if(Square.square.get(box).get(number).getMissValue().equals(Square.square.get(box).get(x).getMissValue()) )
								three++;
					}
					if(three==2){
						
						
					}
					
				}
				
			}
			
		}
		
		//CHECKING EACH ROW FOR THIS PATTERN
		int row = -1;
		for(ArrayList<ArrayList<Integer>> i : rowMissPosition){
			row++;
			int number = -1;
			for(ArrayList<Integer> j : i){
				number++;
				if(j.size()==1){
					int x= (row<3?0:row<6?3:6);
					x +=( j.get(0)<3?0:j.get(0)<6?1:2 );
					int z=	(j.get(0)%3);	
					int colNo = 3*(x%3)+z;
					try {
						setValue(sudoku[x][(row%3)][(z)],number+1);
//						System.out.println("here"+rowMissPosition.get(row).get(number)+"\t"+number);
//						System.out.println(boxMissPosition.get( (4) ).get(number));
//						System.out.println(Square.square.get( (4) ).get(5).getMissValue());
		
		//				updateBoxMiss();
//						setMissPosition();
//						System.out.println(boxMissPosition.get( (0) ).get(5));
					} catch (Exception e) {
						  System.err.println("Na here");
					}
				}
				else if(j.size()==2){
//					System.out.println(rowMissPosition.get(1).get(5));
//					System.out.println(row+"\t"+number);
					//posTactics2(row,number,1);
				}
				
			}
			
			
		}
		
		//CHECKING EACH COLUMN FOR THIS PATTERN
		int col = -1;
		for(ArrayList<ArrayList<Integer>> i : colMissPosition){
			col++;
			int number = -1;
			for(ArrayList<Integer> j : i){
				number++;
				if(j.size()==1){
					int x= col/3;
					x +=( j.get(0)<3?0:j.get(0)<6?3:6 );
					int y=	(j.get(0)%3);	
					int rowNo = 3*(x/3)+y;
					try {
						setValue(sudoku[x][y][(col%3)],number+1);
						//System.out.println(col+""+colMissPosition.get(col).get(number)+"\t"+number+1);
		
		//				updateBoxMiss();
						//setMissPosition();
					} catch (Exception e) {
						System.err.println("Na here");
					}
				}
				else if(j.size()==2){
					int y= (j.get(0)<3?0:j.get(0)<6?1:2);
					int z=	(j.get(0)%3);
					//posTactics2(col,number,2);
				}
				
			}
			//System.out.println(boxMissPosition.get( (0) ).get(5));		
		}
	}
	
	public void setMissPosition(){
		
		//FOR BOX
		Square.squareMissPosition();
		
		//FOR HORIZONTAL
		Row.rowMissPosition();
		
		///FOR VERTICAL
		Column.colMissPosition();
		
	}
	
	public boolean full(){
		
		return (checkVert() && checkHori() && checkSq());
	}
	
	public void setBoxMiss(int x,int y,int z) {
		ArrayList<Integer> miss = sudoku[x][y][z].getMissValue();
		if(miss.size()==1){
			try {
				boxMissPosition.get(x).get(miss.get(0)).clear();
				rowMissPosition.get( 3*(x/3)+y  ).get(miss.get(0)).clear();
				colMissPosition.get( 3*(x%3)+z ).get(miss.get(0)).clear();
				sudoku[x][y][z].setBoxValue(miss.get(0));
				Box.solved++;
				System.out.println(this.toString());
				printSudoku();
				System.out.println();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
//		else if(miss.size()>1){
//			sudoku[x][y][z].setMissArray(miss);
//			//System.err.println(x+"\t"+y+"\t"+z+"\tmiss>1");
//		}
	}
	
	public void initialBoxMiss(int x,int y,int z){
		ArrayList<Integer> miss = compareMiss(x,y,z);
		if(miss.size()==1){
			try {
				sudoku[x][y][z].setBoxValue(miss.get(0));
				Box.solved++;
				System.out.println(this.toString());
				printSudoku();
				System.out.println();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}else if(miss.size()>1){
			sudoku[x][y][z].setMissArray(miss);
			//System.err.println(x+"\t"+y+"\t"+z+"\tmiss>1");
		}
	}
	
	public boolean checkVert(){//OSHI
	
		for(int x = 1;x<10;x++){
			if (checkVertical(x)==false)
				return false;
		} 
		return true;
	}
	
	public boolean checkHori(){

		for(int x = 1;x<10;x++){
			if (checkHorizontal(x)==false)
				return false;
		} 
		return true;
	}
	
	public boolean checkSq(){
		for(int x = 1;x<10;x++){
			if (checkSquare(x)==false)
				return false;
		} 
		return true;
	}
	
	public ArrayList<Integer> compareUpdateMiss(int x,int y,int z ){
		ArrayList<Integer> miss = new ArrayList<Integer>(2);
		ArrayList<Integer> vert = getVerticalMiss(x,y,z);
		ArrayList<Integer> hori = getHorizontalMiss(x,y,z);
		ArrayList<Integer> square = getSquareMiss(x,y,z);
		//System.err.println(x+"\t"+y+"\t"+z+"\t"+vert);
		//System.err.println(x+"\t"+y+"\t"+z+"\t"+hori);
		//System.out.println(x+"\t"+y+"\t"+z+"\t"+square);
		for(int value : square){
			if(hori.contains(value)&&vert.contains(value))
				miss.add(value);
		}
		return miss;
	}
	
	public ArrayList<Integer> compareMiss(int x,int y,int z ){
		ArrayList<Integer> miss = new ArrayList<Integer>(2);
		ArrayList<Integer> vert = getVerticalMiss(x,y,z);
		ArrayList<Integer> hori = getHorizontalMiss(x,y,z);
		ArrayList<Integer> square = getSquareMiss(x,y,z);
		//System.err.println(x+"\t"+y+"\t"+z+"\t"+vert);
		//System.err.println(x+"\t"+y+"\t"+z+"\t"+hori);
		//System.out.println(x+"\t"+y+"\t"+z+"\t"+square);
		for(int value : square){
			if(hori.contains(value)&&vert.contains(value))
				miss.add(value);
		}
		return miss;
	}
	
	public boolean checkVertical(int x){
		boolean complete = true;
		int sum=0;
		int z=(x-1)%3;
		x=x/3;
		int vert = (x % 3)-3;
		for(int i=1;i<10;i++){
			if((i-1)%3==0)
				vert+=3;
			//if the value in the vertical box is valid, then sum up
			//System.out.println(vert+"\t"+(i-1)%3+"\t"+(z));
			sum+=sudoku[vert][(i-1)%3][z].getBoxValue();
			
		}
		if(sum!=45)
			complete = false;
		return complete;
	}
	
	public boolean checkHorizontal(int x){
		boolean complete = true;
		int sum=0;
		int hori = ((x<4)?-1:(x<7)?2:5);
		int y=(x-1)%3;
		for(int i=1;i<10;i++){
			if((i-1)%3==0)
				hori++;
			sum+=sudoku[hori][y][(i-1)%3].getBoxValue();
		}
		if(sum!=45)
			complete = false;
		return complete;
	}
	
	public boolean checkSquare(int x){
		boolean complete = true;
		int sum=0;
		int square = -1;
		for(int i=1;i<10;i++){
			if((i-1)%3==0)
				square++;
			sum+=sudoku[x-1][square][(i-1)%3].getBoxValue();		
		}
		if(sum!=45)
			complete = false;
		return complete;
	}
	
	public ArrayList<Integer> getVerticalMiss(int x,int y,int z ){
		ArrayList<Integer> miss = new ArrayList<Integer>();
		for(int i=1;i<10;i++)
			miss.add(i);
		int vert = (x % 3)-3;
		for(int i=1;i<10;i++){
			if((i-1)%3==0)
				vert+=3;
			int number = sudoku[vert][(i-1)%3][z].getBoxValue(); 
			//if the value in the vertical box is valid, then remove from the miss vertValues
			if(number>0) 
				miss.remove((Integer)number);
		}
		return miss;
	}
	
	public ArrayList<Integer> getHorizontalMiss(int x,int y,int z ){
		ArrayList<Integer> miss = new ArrayList<Integer>();
		for(int i=1;i<10;i++)
			miss.add(i);
		int hori = ((x<3)?-1:(x<6)?2:5);
		for(int i=1;i<10;i++){
			if((i-1)%3==0)
				hori++;
			int number = sudoku[hori][y][(i-1)%3].getBoxValue();
			if(number>0)
				miss.remove((Integer)number);
		}
		return miss;
	}
	
	public ArrayList<Integer> getSquareMiss(int x,int y,int z ){
		ArrayList<Integer> miss = new ArrayList<Integer>();
		for(int i=1;i<10;i++)
			miss.add(i);
		int square = -1;
		for(int i=1;i<10;i++){
			if((i-1)%3==0)
				square++;
			//System.err.println(x+"\t"+square+"\t"+(i-1)%3+"\t");
			int number = sudoku[x][square][(i-1)%3].getBoxValue();
			//System.out.println("ChkSquare: "+square+""+number);
			if(number>0)
				miss.remove((Integer)number);
		}
		return miss;
	}
	
	public String toString(){
		
		return String.format("%s: %d", "Solved",Box.solved);
	}

	public void updateValues(Box box){
		for(int num : rowMissPosition.get(box.row).get(box.getBoxValue()-1)){
			updatePositionValues(Row.row.get(box.row).get(num),box.getBoxValue());
		}
		for(int num : colMissPosition.get(box.col).get(box.getBoxValue()-1)){
			updatePositionValues(Column.col.get(box.col).get(num),box.getBoxValue());
		}
		for(int num : boxMissPosition.get(box.row).get(box.getBoxValue()-1)){
			updatePositionValues(Row.row.get(box.row).get(num),box.getBoxValue());
		}
//		rowMissPosition.get(box.row).get(box.getBoxValue()-1).clear();
//		colMissPosition.get(box.col).get(box.getBoxValue()-1).clear();
//		boxMissPosition.get(box.box).get(box.getBoxValue()-1).clear();
	}
	
	public void updatePositionValues(Box box,int... x) {
		for(int y:x){
			rowMissPosition.get(box.row).get(y).remove((Integer)box.rowNo);
			colMissPosition.get(box.col).get(y).remove((Integer)box.colNo);
			boxMissPosition.get(box.box).get(y).remove((Integer)box.boxNo);			
		}
		
	}


	public void newMissValues(){
		
		for(int x=0;x<9;x++){
			ArrayList<Integer> miss = new ArrayList<>();
			for(int y=0;y<9;y++){
				
				for(int z =1;z<10;z++){
					if( boxMissPosition.get(x).get(z-1).contains((Integer)y) ){
						miss.add(z);
					}
					
					Square.square.get(x).get(y).setMissArray(miss);
				}
				
			}
			
		}
		
	}

}




class Column extends SudokuBoard{
	static ArrayList<ArrayList<Box>> col = new ArrayList<>();
	
	public static void Column(){
			for(int i=0;i<9;i++){
				col.add(new ArrayList<>());
				int vert = (i / 3)-3;
				
				for(int j=0;j<9;j++){
					if((j)%3==0)
						vert+=3;
					//col.get(i).add(new ArrayList<>());
					col.get(i).add(sudoku[vert][(j)%3][(i%3)]);
					
				}
				
	
			}
	}
	
	public static void colMissPosition(){
		colMissPosition = new ArrayList<>();
		///FOR VERTICAL
		for(int x=0;x<9;x++){
			ArrayList<ArrayList<Integer>> col = new ArrayList<>();
			for(int i=0;i<9;i++){
				col.add(new ArrayList<>());
				for(int j=1;j<10;j++){
			
					if(Column.col.get(x).get(j-1).getMissValue().contains((Integer)(i+1)) )
						col.get(i).add(j-1);
		
				}
			}
			colMissPosition.add(col);
		}
	}
		
	public static void updateColValue(int colNo,int no){
			
			for(int j =1;j<10;j++){
				
				if(col.get(colNo).get(j-1).getMissValue().contains((Integer)(no)) ){
					col.get(colNo).get(j-1).getMissValue().remove((Integer)no);
					rowMissPosition.get( col.get(colNo).get(j-1).row).get(no-1).remove((Integer)colNo);
					boxMissPosition.get( col.get(colNo).get(j-1).box).get(no-1).remove((Integer) ((colNo%3) + 3*((j-1)%3 )) );
				}
				
			}
			
			colMissPosition.get( (colNo) ).get(no-1).clear();
		}
	
}

class Row extends SudokuBoard{
	static ArrayList<ArrayList<Box>> row = new ArrayList<>();
	
	public static void Row(){
		for(int i=0;i<9;i++){
			row.add(new ArrayList<>());
			int hori = ((i<3)?-1:(i<6)?2:5);
			for(int j=0;j<9;j++){
				if((j)%3==0)
					hori++;
				//row.get(i).add(new ArrayList<>());
				row.get(i).add(sudoku[hori][(i%3)][(j)%3]);
				
			}
	
		}
			
	}
	
	public static void rowMissPosition(){
		rowMissPosition = new ArrayList<>();
		//FOR HORIZONTAL
		for(int x=0;x<9;x++){
			ArrayList<ArrayList<Integer>> row = new ArrayList<>();
			for(int i=0;i<9;i++){
				row.add(new ArrayList<>());
				int hori = ((x<3)?-1:(x<6)?2:5);
				for(int j=1;j<10;j++){
					if((j-1)%3==0)
						hori++;
					if(Row.row.get(x).get(j-1).getMissValue().contains((Integer)(i+1)) )
						row.get(i).add(j-1);
//					if (sudoku[hori][(x%3)][(j-1)%3].getMissValue().contains((Integer)(i+1)) )
//						row.get(i).add(j-1);
//					
				}
			}
			rowMissPosition.add(row);
		}
	}
		
	public static void updateRowValue(int rowNo,int no){
			
			for(int j =1;j<10;j++){
				
				if(row.get(rowNo).get(j-1).getMissValue().contains((Integer)(no)) ){
					row.get(rowNo).get(j-1).getMissValue().remove((Integer)no);
					colMissPosition.get( row.get(rowNo).get(j-1).col).get(no-1).remove((Integer) (rowNo) );
					boxMissPosition.get( row.get(rowNo).get(j-1).box).get(no-1).remove((Integer) (((j-1)%3) + 3*(rowNo%3 )) );
				}
			}
			rowMissPosition.get( (rowNo) ).get(no-1).clear();
		}
	
}


class Square  extends SudokuBoard{
	static ArrayList<ArrayList<Box>> square = new ArrayList<>();
	
	public static void Square(){
		for(int i=0;i<9;i++){
			square.add(new ArrayList<>());
			int row=-1;
			for(int j=0;j<9;j++){
				if((j)%3==0)
					row++;
				//row.get(i).add(new ArrayList<>());
				square.get(i).add(sudoku[i][row][(j)%3]);
				
			}
	
		}
		
		
	}
	
	public static void squareMissPosition(){
		//Square();
		boxMissPosition = new ArrayList<>();
		//FOR BOX
		for(int x=0;x<9;x++){
		ArrayList<ArrayList<Integer>> box = new ArrayList<>();
		for(int i=0;i<9;i++){
			box.add(new ArrayList<>());
			
			for(int j =1;j<10;j++){
			
				if(square.get(x).get(j-1).getMissValue().contains((Integer)(i+1)) )
					box.get(i).add(j-1);
			}
		}
		boxMissPosition.add(box);
		}
	}
	
	public static void updateSquareValue(int box,int no){
		
		for(int j =1;j<10;j++){
			
			if(square.get(box).get(j-1).getMissValue().contains((Integer)(no)) ){
				square.get(box).get(j-1).getMissValue().remove((Integer)no);
				colMissPosition.get( square.get(box).get(j-1).col).get(no-1).remove((Integer) (((j-1)%3) + 3*(box%3 )) );
				rowMissPosition.get( square.get(box).get(j-1).row).get(no-1).remove((Integer) (((j-1)/3) + 3*(box/3 )) );
			}
		}
		boxMissPosition.get( (box) ).get(no-1).clear();
		
	}
	
}