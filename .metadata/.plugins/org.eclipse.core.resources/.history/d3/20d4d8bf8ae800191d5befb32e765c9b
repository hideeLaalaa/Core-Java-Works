package objectOriented;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Random;
import java.util.Scanner;

import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class telemetry {
	
	public static void main(String[] args) {		
		
		XSSFWorkbook wf = new XSSFWorkbook();
//		soc = 39+ran.nextInt(36);
//		power = 10+ran.nextInt(6);
//		volt=(power>19?18:(15+ran.nextInt(3)));
//		current =(int) Math.round((double)power/volt);
//		System.out.printf("%d%%\t%dA\t%dV\t%dW\n",soc,current,volt,power);
		
		
		try{
			int no=1;
			Scanner tele = new Scanner (new File("C:\\Users\\olatoyosi\\Documents\\HERB\\workspace\\gui\\src\\ch10\\tele.txt"));
			Scanner panels = new Scanner (new File("C:\\Users\\olatoyosi\\Documents\\HERB\\workspace\\gui\\src\\ch10\\panels.txt"));
			while(tele.hasNext()||panels.hasNext()){
				System.out.printf("%d: %s & %s\t\t\t\t\t",no++,tele.nextLine(),panels.nextLine());
			}
		}catch(FileNotFoundException ffe){
			System.err.println("Error opening file.");
			System.exit(1);
		}
		System.out.println();
		for(int i=0;i<55;i++)
		System.out.print("SOC (%)\tTelementry Reading\t\t\t\t");
		
		System.out.println();
		for(int i=0;i<55;i++)
			System.out.print("\tPanel Current\tPanel Voltage\tPanel Power\t\t");
		
		System.out.println();
		
		panels[] solarP = new panels[55]; 
		int weather = new Random().nextInt(4);
		for(int i=0;i<solarP.length;i++){
			solarP[i]= new panels(weather);
		}
		
		for(int hour=1;hour<13;hour++){
			for(int pan=0;pan<solarP.length;pan++){
				solarP[pan].dayTime(hour);
				System.out.print("\t\t");
			}
			System.out.println();	
		}
		
	
	
	}
	
}

class panels {
	
	 int soc,power, current, volt;
	 Random ran = new Random();
	 static int weather;
	 
	public panels(int weather) {
		// TODO Auto-generated constructor stub
		if(weather < 3)
			this.weather=weather;
		else 
			this.weather=0;
	}
	public panels() {
		// TODO Auto-generated constructor stub
		this.weather=0;
	}
	
	
	public void dayTime(int hour){
		
		
		switch(hour){
		
		case 1: {
			soc = 38+ran.nextInt(36);
			power = 10+ran.nextInt((6-weather*2));
			volt=(power>19?18:(15+ran.nextInt(3)));
			current =(int) Math.round((double)power/volt);
		}break;
		
		case 2: {
			
			power = 9+ran.nextInt((9-weather*2));
			soc = soc+incrSoc(power);
			volt=(power>19?18:(15+ran.nextInt(3)));
			current =(int) Math.round((double)power/volt);
		}break;
		
		case 3: {
			power = 12+ran.nextInt((10-weather*2));
			soc = soc+(power>19?incrSoc(power):-(1+ran.nextInt(3)));
			volt=(power>19?18:(15+ran.nextInt(3)));
			current =(int) Math.round((double)power/volt);
		}break;
		
		case 4: {
			power = 17+ran.nextInt((13-weather*2));
			soc = soc+(power>19?incrSoc(power):-(1+ran.nextInt(3)));
			volt=(power>19?18:(15+ran.nextInt(3)));
			current =(int) Math.round((double)power/volt);
		}break;
		
		case 5: {
			power = 18+ran.nextInt((12-weather*2));
			soc = soc+(power>19?incrSoc(power):-(1+ran.nextInt(3)));
			volt=(power>19?18:(15+ran.nextInt(3)));
			current =(int) Math.round((double)power/volt);
		}break;
		
		case 6: {
			power = 25+ran.nextInt((10-weather*4));
			soc = soc+(power>19?incrSoc(power):-(1+ran.nextInt(3)));
			volt=(power>19?18:(15+ran.nextInt(3)));
			current =(int) Math.round((double)power/volt);
		}break;
		
		case 7: {
			power = 15+ran.nextInt((38-weather*10));
			soc = soc+(power>19?incrSoc(power):-(1+ran.nextInt(3)));
			volt=(power>19?18:(15+ran.nextInt(3)));
			current =(int) Math.round((double)power/volt);
		}break;
		
		case 8: {
			power = 15+ran.nextInt((38-weather*10));
			soc = soc+(power>19?incrSoc(power):-(1+ran.nextInt(3)));
			volt=(power>19?18:(15+ran.nextInt(3)));
			current =(int) Math.round((double)power/volt);
		}break;
		
		case 9: {
			power = 15+ran.nextInt((38-weather*10));
			soc = soc+(power>19?incrSoc(power):-(1+ran.nextInt(3)));
			volt=(power>19?18:(15+ran.nextInt(3)));
			current =(int) Math.round((double)power/volt);
		}break;
		
		case 10: {
			power = 12+ran.nextInt((23-weather*5));
			soc = soc+(power>19?incrSoc(power):-(1+ran.nextInt(3)));
			volt=(power>19?18:(15+ran.nextInt(3)));
			current =(int) Math.round((double)power/volt);
		}break;
		
		case 11: {
			power = 8+ran.nextInt((15-weather*3));
			soc = soc+(power>19?incrSoc(power):-(1+ran.nextInt(3)));
			volt=(power>19?18:(15+ran.nextInt(3)));
			current =(int) Math.round((double)power/volt);
		}break;
		
		case 12: {
			power = 8+ran.nextInt((12-weather*2));
			soc = soc+(power>19?incrSoc(power):-(1+ran.nextInt(3)));
			volt=(power>19?18:(15+ran.nextInt(3)));
			current =(int) Math.round((double)power/volt);
		}break;
	}
		soc=(soc>100?100:soc);
		System.out.printf("%d%%\t%dA\t%dV\t%dW",soc,current,volt,power);
		

}

	private int incrSoc(int power) {
		int incr = 0;
		
			if (power%10<4)
				incr = ran.nextInt(1);
			if (power%14<2)
				incr = 1+ran.nextInt(1);
			if (power%16<7)
				incr = 2+ran.nextInt(1);
			if (power%23<8)
				incr = 3+ran.nextInt(2);
			if (power%31<8)
				incr = 6+ran.nextInt(3);
			if (power%38<9)
				incr = 7+ran.nextInt(5);
			if (power%47<7)
				incr = 10+ran.nextInt(2);
			if (power%54<5)
				incr = 12+ran.nextInt(3);
		
		return incr;
	}



}

	

